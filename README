=====IN DEVELOPMENT=======


OVERVIEW:

Goal is to create a general command line framework that allows a development teams
to stand up a custom command line tool within minutes. Once it is stood up, 
all team members can create and publish new 'plugins/commands' to the tool as fast as possible, while
allowing many features / extensability if they want to create more custom/complex plugins.

Examples of possible plugins could include custom builders, server management, backing up folders, applying updates 
to machine, code gen team templates, automation of team env setup,?? .

General Design Strategy: 

Customizs the 'click' package to take advantage of 'groups, commands and arg parsing'. 
We override its implementation and create new layer around click for a higher level tool.





RECOMMENDED DEV SETUP:
    python version = 3.7
    0) clone repo and navigate to project base directory 'https://github.com/darthsiderius/nada.git'
    1) for development purposes -> create virtual env 'virtualenv venv --python=/usr/bin/python3.7'
    2) activate virtual environment -> 'source venv/bin/activate'
                    It should be preinstalled with python version
                    The tool will only work if virtual env is activated. 
                    Make sure to activate it each time before working. To deactivate it: 'deactivate'.
                    https://docs.python-guide.org/dev/virtualenvs/
    3) install project -> python -m pip install . -e 
                    This will install all dependencies and create the command line tool.

    4) invoke 'nada about' from command line


    AVAILABLE PLUGINS: ( still in development / most are placeholders ):
            nada logs:list
            nada logs:show
            nada logs:search " XX "
            nada logs:clean

            nada about
            nada about:<any base command>   ex: nada about:logs  , nada about:help , nada about:market , nada about:pantry

            nada help
            nada market:search
            nada market:browse
            nada market:install
            nada market:publish

            # need to change this name
            nada pantry:list
            nada pantry:trash
            nada pantry:create
            nada pantry:update

            
EASILY CREATE NEW COMMAND/PLUGIN:
    Note: this template generation will be automated when the other commands are finished, so itll be even quicker.

    One of the main bonuses of this is that it requires minimal effort for plugin integration / setup. It uses dynamic
    loading / discovery and dispatching.

    1) Copy and paste an existing plugin folder, such as 'pantry'.
    2) Determine name of your command
    3) Change the plugins folder and pantry.py to be the name of your command ( this is going to change when we have packaged plugins)
    4) Change the name in file
    5) Test new command 'nada <nameofplugin>:<subcommand>



    HOW IT HOOKS UP TO FRAMEWORK:
    
    1) The folder name needs to be the name of the command.
    2) In your __plugin__.py file ( which resides in top level directory of plugin ) , it defines a entry point callback to your program, set this to your entry point.
       The framework will find the match the request to plugin folder, look at the __plugin__ file for the entry point callback and 
       then forward all data to it.

            -- because we are using click , its usually a 'group' , but it can be a command type for similar plugins.

    
    REFERENCES:

        How to use click quickstart: https://click.palletsprojects.com/en/7.x/quickstart/
        Click commands and groups:   https://click.palletsprojects.com/en/7.x/commands/ 

TODO/NOTES

    @TODO use PYPY instead of normal python

    Abstract logging interface to add different types of loggers

    How do we create adatpers for plugins that were based on a different interface?

    create config file for project
        -- add required plugins to config


    create script to customize the tool default names

    add market:help and help:market, need default command decorators